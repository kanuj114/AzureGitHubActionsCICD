GitHub Actions - Concepts and CI/CD Overview

-> What is GitHub Actions?
GitHub Actions is a CI/CD (Continuous Integration / Continuous Deployment) service built into GitHub.
It allows you to automate software development workflows (build, test, deploy, release, etc.) directly 
from your repository.

-> Workflow of GitHub Actions (pipeline)
GitHub Actions uses its own worker processes (runners). It executes workflows defined in YAML files.

-> GitHub Architecture
[ Developer Pushes Code ]
             │
             ▼
[ GitHub detects Event ]
             │
             ▼
[ Workflow (.yml) Triggers ]
             │
             ▼
[ GitHub schedules Jobs ]
             │
   ┌─────────┴─────────┐
   ▼                   ▼
GitHub-Hosted Runner   Self-Hosted Runner
 (GitHub Cloud VM)      (Your Machine/VM)
             │
             ▼
[ Steps Executed: checkout, build, test, deploy ]

-> Key Concepts
1. Workflow – Automated process defined in YAML file (.github/workflows/*.yml).
2. Job – Set of steps executed on the same runner (workflow can have multiple jobs).
3. Step – Individual task (run command, use action).
4. Action – Reusable code unit (like plugins).
5. Runner – Machine where workflows run (GitHub-hosted or self-hosted).

-> Application Context
- GitHub Actions (major features)
- Workflow (pipeline)
- CI/CD
- Worker process (GitHub-hosted runner by default)
- Deployment target: Azure WebApp / Azure Functions

-> Pre-Requisite
- Azure Service Bus Architecture

-> Tools in Context
- xUnit for testing
- CI/CD pipelines with Jenkins, GitHub Actions, Azure DevOps, Docker, Kubernetes
- Hands-on with SonarQube

-> Additional Concepts
- Deployment Centre: Authenticate and authorize between DevOps and Azure subscription.
- Deployment Groups: On-agent IIS and Azure ACR act as a bridge.
- Multistage YAML: Separate build and release pipelines.
- Agents: Required to host pipeline execution (Azure DevOps does not provide agent automatically).
